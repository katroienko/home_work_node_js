// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Animal
// –°–æ–∑–¥–∞–π—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Animal —Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º –º–µ—Ç–æ–¥–æ–º makeSound().
// –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å—ã Dog –∏ Cat, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å–ª–µ–¥—É—é—Ç Animal –∏ —Ä–µ–∞–ª–∏–∑—É—é—Ç –º–µ—Ç–æ–¥ makeSound() –ø–æ-—Å–≤–æ–µ–º—É (Dog –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å "Bark", –∞ Cat ‚Äî "Meow").
// –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ —Ç–∏–ø–∞ Animal[], –≤–∫–ª—é—á–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç—ã Dog –∏ Cat, –∏ –≤—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ makeSound() –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞.

abstract class Animal {
  abstract makeSound(): string;
}

class Dog extends Animal {
 override  makeSound(): string {
    return "Bark";
  }
}

class Cat extends Animal {
 override  makeSound(): string {
    return "Meow";
  }
}


const animals: Animal[] = [new Dog(), new Cat()];

animals.forEach(animal => {
  console.log(animal.makeSound());
});


// –ó–∞–¥–∞–Ω–∏–µ 2
// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Shape —Å —Ü–≤–µ—Ç–æ–º
// –°–æ–∑–¥–∞–π—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å `ColoredShape`, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å–ª–µ–¥—É–µ—Ç `Shape` (–∏–∑ –∑–∞–¥–∞–Ω–∏—è 4 –Ω–∞ —É—Ä–æ–∫–µ) –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –ø–æ–ª–µ `color`.
// –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å—ã `ColoredCircle` –∏ `ColoredRectangle`, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å–ª–µ–¥—É—é—Ç `ColoredShape`, –∑–∞–¥–∞—é—Ç `color` –∏ —Ä–µ–∞–ª–∏–∑—É—é—Ç –º–µ—Ç–æ–¥ `calculateArea()`.
// –í—ã–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∏ —Ü–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Shape
abstract class Shape {
  abstract calculateArea(): number;
}
abstract class ColoredShape extends Shape {
  abstract color: string;
}

class ColoredCircle extends ColoredShape {
  radius: number;
  override color: string;

  constructor(radius: number, color: string) {
    super();
    this.radius = radius;
    this.color = color;
  }

  override calculateArea(): number {
    return Math.PI * this.radius * this.radius;
  }
}


class ColoredRectangle extends ColoredShape {
  width: number;
  height: number;
  override color: string;

  constructor(width: number, height: number, color: string) {
    super();
    this.width = width;
    this.height = height;
    this.color = color;
  }

  override calculateArea(): number {
    return this.width * this.height;
  }
}

// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏ –≤—ã–≤–æ–¥–∏–º –ø–ª–æ—â–∞–¥—å –∏ —Ü–≤–µ—Ç
const shapes: ColoredShape[] = [
  new ColoredCircle(5, "red"),
  new ColoredRectangle(4, 6, "blue"),
];

shapes.forEach(shape => {
  console.log(`Color: ${shape.color}, Area: ${shape.calculateArea().toFixed(2)}`);
});

// –ó–∞–¥–∞–Ω–∏–µ 3
// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Appliance
// –°–æ–∑–¥–∞–π—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å `Appliance` —Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ `turnOn()` –∏ `turnOff()`.
// –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å—ã `WashingMachine` –∏ `Refrigerator`, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å–ª–µ–¥—É—é—Ç `Appliance` –∏ —Ä–µ–∞–ª–∏–∑—É—é—Ç –º–µ—Ç–æ–¥—ã `turnOn()` –∏ `turnOff()`, –≤—ã–≤–æ–¥—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
// –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ —Ç–∏–ø–∞ `Appliance[]`, –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç—ã `WashingMachine` –∏ `Refrigerator`, –∏ –≤—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥—ã `turnOn()` –∏ `turnOff()` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Appliance
abstract class Appliance {
  abstract turnOn(): void;
  abstract turnOff(): void;
}

class WashingMachine extends Appliance {
  override turnOn(): void {
    console.log("Washing machine is now ON ");
  }

  override turnOff(): void {
    console.log("Washing machine is now OFF ");
  }
}


class Refrigerator extends Appliance {
  override turnOn(): void {
    console.log("Refrigerator is now ON ");
  }

  override turnOff(): void {
    console.log("Refrigerator is now OFF ");
  }
}


const appliances: Appliance[] = [
  new WashingMachine(),
  new Refrigerator()
];

for (const appliance of appliances) {
  appliance.turnOn();
  appliance.turnOff();
}


// –ó–∞–¥–∞–Ω–∏–µ 4
// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Account
// –°–æ–∑–¥–∞–π—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å `Account` —Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ `deposit(amount: number)` –∏ `withdraw(amount: number)`.
// –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å—ã `SavingsAccount` –∏ `CheckingAccount`, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å–ª–µ–¥—É—é—Ç `Account`.
// –í –∫–ª–∞—Å—Å–µ `SavingsAccount` –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫.
// –í –∫–ª–∞—Å—Å–µ `CheckingAccount` —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏. 
// –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç–∞—Ö –æ–±–æ–∏—Ö –∫–ª–∞—Å—Å–æ–≤.

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Account
abstract class Account {
  protected balance: number;

  constructor(initialBalance: number) {
    this.balance = initialBalance;
  }

  abstract deposit(amount: number): void;
  abstract withdraw(amount: number): void;

  getBalance(): number {
    return this.balance;
  }
}


class SavingsAccount extends Account {
  private interestRate: number; 

  constructor(initialBalance: number, interestRate: number) {
    super(initialBalance);
    this.interestRate = interestRate;
  }

  override deposit(amount: number): void {
    this.balance += amount;
    console.log(`üí∞ Savings: Deposited ${amount}, new balance: ${this.balance}`);
  }

  override withdraw(amount: number): void {
    if (amount <= this.balance) {
      this.balance -= amount;
      console.log(` Savings: Withdrew ${amount}, new balance: ${this.balance}`);
    } else {
      console.log("Savings: Not enough funds");
    }
  }

  addInterest(): void {
    const interest = this.balance * (this.interestRate / 100);
    this.balance += interest;
    console.log(` Savings: Interest ${interest.toFixed(2)} added, new balance: ${this.balance.toFixed(2)}`);
  }
}


class CheckingAccount extends Account {
  private fee: number;

  constructor(initialBalance: number, fee: number) {
    super(initialBalance);
    this.fee = fee;
  }

  override deposit(amount: number): void {
    this.balance += amount;
    console.log(`Checking: Deposited ${amount}, new balance: ${this.balance}`);
  }

  override withdraw(amount: number): void {
    const total = amount + this.fee;
    if (total <= this.balance) {
      this.balance -= total;
      console.log(`Checking: Withdrew ${amount} + fee ${this.fee}, new balance: ${this.balance}`);
    } else {
      console.log("Checking: Not enough funds (including fee)");
    }
  }
}


const savings = new SavingsAccount(1000, 5); 
savings.deposit(500);
savings.withdraw(300);
savings.addInterest();

console.log("------------");

const checking = new CheckingAccount(1000, 10); 
checking.deposit(200);
checking.withdraw(500);
checking.withdraw(800); 


// –ó–∞–¥–∞–Ω–∏–µ 5
//  –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Media
// –°–æ–∑–¥–∞–π—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å `Media` —Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º –º–µ—Ç–æ–¥–æ–º `play()`.
// –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å—ã `Audio` –∏ `Video`, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å–ª–µ–¥—É—é—Ç `Media` –∏ —Ä–µ–∞–ª–∏–∑—É—é—Ç –º–µ—Ç–æ–¥ `play()` –ø–æ-—Å–≤–æ–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `Audio` –≤—ã–≤–æ–¥–∏—Ç "Playing audio", –∞ `Video` ‚Äî "Playing video").
// –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ —Ç–∏–ø–∞ `Media[]`, –≤–∫–ª—é—á–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç—ã `Audio` –∏ `Video`, –∏ –≤—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ `play()` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞.


abstract class Media {
  abstract play(): void;
}


class Audio2 extends Media {
  override play(): void {
    console.log(" Playing audio");
  }
}


class Video extends Media {
  override play(): void {
    console.log(" Playing video");
  }
}

// –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∏–ø–∞ Media
const mediaLibrary: Media[] = [
  new Audio2(),
  new Video(),
  new Audio2(),
  new Video(),
];

// –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ play() –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
for (const item of mediaLibrary) {
  item.play();
}
